import{_ as e,c as a,o,a3 as t}from"./chunks/framework.BRYRxafc.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"sidebar/development/node.md","filePath":"sidebar/development/node.md"}'),r={name:"sidebar/development/node.md"},d=t('<h2 id="node-js-简介" tabindex="-1">Node.js 简介 <a class="header-anchor" href="#node-js-简介" aria-label="Permalink to &quot;Node.js 简介&quot;">​</a></h2><p>Node.js 是一个开源和跨平台的 JavaScript 运行时环境。它是几乎任何类型项目的流行工具!</p><p>Node.js 在浏览器之外运行 V8 JavaScript 引擎，它是 Google Chrome 的核心。这使得 Node.js 非常高效.</p><p>Node.js 应用程序在单个进程中运行，无需为每个请求创建新线程。Node.js 在其标准库中提供了一组异步 I/O 原语，以防止 JavaScript 代码阻塞，并且通常，Node.js 中的库是使用非阻塞范例编写的，这使得阻塞行为成为例外而不是常态.</p><p>当 Node.js 执行 I/O 操作时，如从网络读取、访问数据库或文件系统，Node.js 不会阻塞线程和浪费 CPU 周期等待，而是会在响应返回时恢复操作.</p><p>这允许 Node.js 处理数千个与单个服务器的并发连接，而 ​​ 不会引入管理线程并发的负担，这可能是错误的重要来源.</p><p>Node.js 具有独特的优势，因为数百万为浏览器编写 JavaScript 的前端开发人员现在除了客户端代码之外，还能够编写服务器端代码，而无需学习完全不同的语言.</p><p>在 Node.js 中，可以毫无问题地使用新的 ECMAScript 标准，因为您不必等待所有用户更新他们的浏览器——您负责通过更改 Node.js 版本来决定使用哪个 ECMAScript 版本，您还可以通过运行带有标志的 Node.js 来启用特定的实验性功能.</p><h3 id="在线文档" tabindex="-1">在线文档 <a class="header-anchor" href="#在线文档" aria-label="Permalink to &quot;在线文档&quot;">​</a></h3><p><a href="https://nodejs.p2hp.com/learn" target="_blank" rel="noreferrer">https://nodejs.p2hp.com/learn</a></p><h3 id="下载" tabindex="-1">下载 <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载&quot;">​</a></h3><p><a href="https://nodejs.p2hp.com/download/" target="_blank" rel="noreferrer">https://nodejs.p2hp.com/download/</a></p>',12),s=[d];function p(n,c,i,l,h,_){return o(),a("div",null,s)}const N=e(r,[["render",p]]);export{m as __pageData,N as default};
